@page "/"
@rendermode InteractiveServer
@using BlazorFrame

<PageTitle>BlazorFrame Demo - v2.1 with Sandbox Features</PageTitle>

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">🖼️ BlazorFrame Component Demo v2.1</h1>
            <p class="lead">
                Comprehensive testing environment for BlazorFrame featuring <strong>NEW sandbox security</strong>, 
                HTTPS enforcement, configuration validation, auto-resize, cross-frame messaging, and 
                <strong>Content Security Policy (CSP)</strong> integration.
            </p>
            <div class="alert alert-info">
                <strong>🆕 New in v2.1:</strong> Iframe sandbox attributes, HTTPS enforcement, configuration validation,
                and comprehensive security conflict detection.
            </div>
        </div>
    </div>

    <!-- Control Panel -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">🎛️ Control Panel</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Test URL:</label>
                            <select class="form-select" @onchange="OnUrlChange">
                                <option value="https://httpbin.org/html">HTTPBin HTML (HTTPS)</option>
                                <option value="http://httpbin.org/html">HTTPBin HTML (HTTP - Test HTTPS enforcement)</option>
                                <option value="https://www.example.com">Example.com</option>
                                <option value="https://jsonplaceholder.typicode.com/">JSON Placeholder</option>
                                <option value="data:text/html,<h1>Data URL Test</h1><p>This iframe has sandbox restrictions.</p><script>setTimeout(() => window.parent.postMessage({type: 'test', data: 'Hello from sandboxed data URL!'}, '*'), 1000);</script>">Data URL (Test Sandbox)</option>
                                <option value="javascript:alert('XSS Test')">JavaScript URL (Security Test)</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Security Preset:</label>
                            <select class="form-select" @onchange="OnSecurityPresetChange">
                                <option value="development">🛠️ Development</option>
                                <option value="production">🏭 Production</option>
                                <option value="payment">💳 Payment Widget</option>
                                <option value="trusted">🤝 Trusted Content</option>
                                <option value="custom">⚙️ Custom</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Sandbox Preset:</label>
                            <select class="form-select" @onchange="OnSandboxPresetChange">
                                <option value="None">❌ No Sandbox</option>
                                <option value="Basic">🔵 Basic (Scripts + Same-Origin)</option>
                                <option value="Permissive">🟢 Permissive (Forms + Popups)</option>
                                <option value="Strict">🟡 Strict (Limited)</option>
                                <option value="Paranoid">🔴 Paranoid (Maximum Isolation)</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <div class="form-check mt-2">
                                <input class="form-check-input" type="checkbox" @bind="enableAutoResize" id="autoResize">
                                <label class="form-check-label" for="autoResize">Auto-resize</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       checked="@requireHttps"
                                       @onchange="OnHttpsRequirementChange"
                                       id="requireHttps">
                                <label class="form-check-label" for="requireHttps">Require HTTPS</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       checked="@allowInsecureConnections"
                                       @onchange="OnInsecureConnectionsChange"
                                       id="allowInsecure">
                                <label class="form-check-label" for="allowInsecure">Allow HTTP in Dev</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Configuration Status Panel -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">⚙️ Configuration Status</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <h6>🛡️ Security Configuration:</h6>
                            <ul class="list-unstyled small">
                                <li><strong>Preset:</strong> @currentSecurityPreset</li>
                                <li><strong>Sandbox:</strong> @(currentSandboxPreset == SandboxPreset.None ? "❌ Disabled" : $"✅ {currentSandboxPreset}")</li>
                                <li><strong>Effective Sandbox:</strong> <code class="small">@(currentSecurityOptions.GetEffectiveSandboxValue() ?? "none")</code></li>
                                <li><strong>HTTPS Required:</strong> @(currentSecurityOptions.RequireHttps ? "✅" : "❌")</li>
                                <li><strong>Allow HTTP:</strong> @(currentSecurityOptions.AllowInsecureConnections ? "✅" : "❌")</li>
                                <li><strong>Strict Validation:</strong> @(currentSecurityOptions.EnableStrictValidation ? "✅" : "❌")</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6>📊 Security Limits:</h6>
                            <ul class="list-unstyled small">
                                <li><strong>Max Message Size:</strong> @(currentSecurityOptions.MaxMessageSize / 1024)KB</li>
                                <li><strong>Max JSON Depth:</strong> @currentSecurityOptions.MaxJsonDepth</li>
                                <li><strong>Max Object Props:</strong> @currentSecurityOptions.MaxObjectProperties</li>
                                <li><strong>Max Array Elements:</strong> @currentSecurityOptions.MaxArrayElements</li>
                                <li><strong>Script Protocols:</strong> @(currentSecurityOptions.AllowScriptProtocols ? "✅ Allowed" : "❌ Blocked")</li>
                            </ul>
                        </div>
                        <div class="col-md-4">
                            <h6>⚠️ Configuration Validation:</h6>
                            @if (configValidationResult != null)
                            {
                                <div class="small">
                                    <div class="badge @(configValidationResult.IsValid ? "bg-success" : "bg-danger") mb-1">
                                        @(configValidationResult.IsValid ? "✅ Valid" : "❌ Issues Found")
                                    </div>
                                    @if (configValidationResult.Errors.Any())
                                    {
                                        <div class="text-danger">
                                            <strong>Errors:</strong>
                                            @foreach (var error in configValidationResult.Errors)
                                            {
                                                <div>• @error</div>
                                            }
                                        </div>
                                    }
                                    @if (configValidationResult.Warnings.Any())
                                    {
                                        <div class="text-warning">
                                            <strong>Warnings:</strong>
                                            @foreach (var warning in configValidationResult.Warnings.Take(2))
                                            {
                                                <div>• @warning</div>
                                            }
                                            @if (configValidationResult.Warnings.Count > 2)
                                            {
                                                <div>• ... and @(configValidationResult.Warnings.Count - 2) more</div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Panel -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-success">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">📊 Runtime Status & Events</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-2">
                            <div class="d-flex align-items-center">
                                <span class="badge @(isLoaded ? "bg-success" : "bg-secondary") me-2">
                                    @(isLoaded ? "✅" : "⏳")
                                </span>
                                <span>Loaded: @(isLoaded ? "Yes" : "Loading...")</span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="d-flex align-items-center">
                                <span class="badge bg-primary me-2">📨</span>
                                <span>Messages: @messageCount</span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="d-flex align-items-center">
                                <span class="badge @(securityViolations > 0 ? "bg-danger" : "bg-success") me-2">
                                    @(securityViolations > 0 ? "⚠️" : "🛡️")
                                </span>
                                <span>Violations: @securityViolations</span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="d-flex align-items-center">
                                <span class="badge @(configurationErrors > 0 ? "bg-warning" : "bg-success") me-2">
                                    @(configurationErrors > 0 ? "⚙️" : "✅")
                                </span>
                                <span>Config Errors: @configurationErrors</span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="d-flex align-items-center">
                                <span class="badge @(urlValidationErrors > 0 ? "bg-danger" : "bg-success") me-2">
                                    @(urlValidationErrors > 0 ? "🚫" : "🔗")
                                </span>
                                <span>URL Errors: @urlValidationErrors</span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="d-flex align-items-center">
                                <span class="badge @(cspHeadersGenerated > 0 ? "bg-warning" : "bg-secondary") me-2">
                                    @(cspHeadersGenerated > 0 ? "🛡️" : "❌")
                                </span>
                                <span>CSP: @cspHeadersGenerated</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Demo Sections -->
    <div class="row">
        <!-- Sandbox Demo -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100 border-warning">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">🆕 Sandbox Security Demo</h5>
                    <small>Testing iframe sandbox attributes and HTTPS enforcement</small>
                </div>
                <div class="card-body p-2">
                    <div class="alert alert-info alert-sm py-1 mb-2">
                        <small>
                            <strong>Current Sandbox:</strong> @(currentSecurityOptions.GetEffectiveSandboxValue() ?? "none") <br>
                            <strong>HTTPS Policy:</strong> @(currentSecurityOptions.RequireHttps ? (currentSecurityOptions.AllowInsecureConnections ? "Required (with dev exception)" : "Strictly required") : "Not required")
                        </small>
                    </div>
                    <BlazorFrame Src="@currentUrl"
                                 Width="100%"
                                 Height="300px"
                                 EnableAutoResize="@enableAutoResize"
                                 EnableScroll="false"
                                 SecurityOptions="@currentSecurityOptions"
                                 CspOptions="@currentCspOptions"
                                 OnLoad="HandleIframeLoad"
                                 OnValidatedMessage="HandleValidatedMessage"
                                 OnSecurityViolation="HandleSecurityViolation"
                                 OnInitializationError="HandleInitializationError"
                                 OnCspHeaderGenerated="HandleCspHeaderGenerated"
                                 class="border rounded" />
                </div>
            </div>
        </div>

        <!-- Configuration Testing -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100 border-danger">
                <div class="card-header bg-danger text-white">
                    <h5 class="mb-0">🔍 Configuration Conflict Testing</h5>
                    <small>Testing configuration validation and conflict detection</small>
                </div>
                <div class="card-body p-2">
                    <div class="alert alert-warning alert-sm py-1 mb-2">
                        <small>
                            <strong>Test Configuration:</strong> RequireHTTPS + AllowInsecure + Paranoid Sandbox
                        </small>
                    </div>
                    <BlazorFrame Src="@currentUrl"
                                 Width="100%"
                                 Height="300px"
                                 EnableAutoResize="false"
                                 EnableScroll="true"
                                 SecurityOptions="@conflictTestOptions"
                                 OnValidatedMessage="HandleConflictTestMessage"
                                 OnSecurityViolation="HandleConflictTestViolation"
                                 class="border rounded" />
                </div>
            </div>
        </div>
    </div>

    <!-- Sandbox Preset Comparison -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">🔒 Sandbox Preset Comparison</h5>
                    <small>Compare different sandbox security levels side by side</small>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>🔵 Basic Sandbox</h6>
                            <small class="text-muted">allow-scripts allow-same-origin</small>
                            <BlazorFrame Src="@testUrl"
                                         Width="100%"
                                         Height="150px"
                                         EnableAutoResize="false"
                                         SecurityOptions="@basicSandboxOptions"
                                         OnSecurityViolation="@((v) => HandleSandboxTestViolation("Basic", v))"
                                         class="border rounded mt-2" />
                        </div>
                        <div class="col-md-3">
                            <h6>🟢 Permissive Sandbox</h6>
                            <small class="text-muted">+ allow-forms allow-popups</small>
                            <BlazorFrame Src="@testUrl"
                                         Width="100%"
                                         Height="150px"
                                         EnableAutoResize="false"
                                         SecurityOptions="@permissiveSandboxOptions"
                                         OnSecurityViolation="@((v) => HandleSandboxTestViolation("Permissive", v))"
                                         class="border rounded mt-2" />
                        </div>
                        <div class="col-md-3">
                            <h6>🟡 Strict Sandbox</h6>
                            <small class="text-muted">scripts + same-origin only</small>
                            <BlazorFrame Src="@testUrl"
                                         Width="100%"
                                         Height="150px"
                                         EnableAutoResize="false"
                                         SecurityOptions="@strictSandboxOptions"
                                         OnSecurityViolation="@((v) => HandleSandboxTestViolation("Strict", v))"
                                         class="border rounded mt-2" />
                        </div>
                        <div class="col-md-3">
                            <h6>🔴 Paranoid Sandbox</h6>
                            <small class="text-muted">allow-scripts only</small>
                            <BlazorFrame Src="@testUrl"
                                         Width="100%"
                                         Height="150px"
                                         EnableAutoResize="false"
                                         SecurityOptions="@paranoidSandboxOptions"
                                         OnSecurityViolation="@((v) => HandleSandboxTestViolation("Paranoid", v))"
                                         class="border rounded mt-2" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Security Testing Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card border-secondary">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">🧪 Security & Configuration Testing</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Configuration Tests:</h6>
                            <div class="btn-group-vertical d-grid gap-2">
                                <button class="btn btn-outline-primary btn-sm" @onclick="TestValidConfiguration">
                                    ✅ Test Valid Configuration
                                </button>
                                <button class="btn btn-outline-warning btn-sm" @onclick="TestConflictingConfiguration">
                                    ⚠️ Test Conflicting Configuration
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="TestInvalidConfiguration">
                                    ❌ Test Invalid Configuration
                                </button>
                                <button class="btn btn-outline-info btn-sm" @onclick="ValidateAllConfigurations">
                                    🔍 Validate All Configurations
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Security Tests:</h6>
                            <div class="btn-group-vertical d-grid gap-2">
                                <button class="btn btn-outline-success btn-sm" @onclick="TestHttpsEnforcement">
                                    🔒 Test HTTPS Enforcement
                                </button>
                                <button class="btn btn-outline-warning btn-sm" @onclick="TestSandboxBypass">
                                    🚧 Test Sandbox Bypass
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="TestMaliciousUrl">
                                    🚨 Test Malicious URL
                                </button>
                                <button class="btn btn-outline-info btn-sm" @onclick="TestCustomValidation">
                                    ⚙️ Test Custom Validation
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Event Log -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">📋 Event Log (Recent Activity)</h5>
                    <div>
                        <button class="btn btn-outline-secondary btn-sm me-2" @onclick="ExportConfiguration">
                            📤 Export Config
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="ClearLog">Clear Log</button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="log-container" style="height: 400px; overflow-y: auto; font-family: monospace; font-size: 0.875rem;">
                        @if (eventLog.Count == 0)
                        {
                            <p class="text-muted">No events logged yet. Interact with the iframes above to see security and configuration events.</p>
                        }
                        else
                        {
                            @foreach (var logEntry in eventLog.AsEnumerable().Reverse())
                            {
                                <div class="log-entry p-2 mb-1 rounded @GetLogEntryClass(logEntry.Type)">
                                    <small class="text-muted">[@logEntry.Timestamp.ToString("HH:mm:ss.fff")]</small>
                                    <strong>@logEntry.Type:</strong> @logEntry.Message
                                    @if (!string.IsNullOrEmpty(logEntry.Details))
                                    {
                                        <br>
                                        <small class="text-muted">@logEntry.Details</small>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .log-entry {
        border-left: 4px solid #dee2e6;
    }
    .log-entry.info { background-color: #d1ecf1; border-left-color: #17a2b8; }
    .log-entry.success { background-color: #d4edda; border-left-color: #28a745; }
    .log-entry.warning { background-color: #fff3cd; border-left-color: #ffc107; }
    .log-entry.error { background-color: #f8d7da; border-left-color: #dc3545; }
    .log-entry.security { background-color: #f8d7da; border-left-color: #dc3545; border-left-width: 6px; }
    .log-entry.config { background-color: #e2e3e5; border-left-color: #6c757d; border-left-width: 6px; }
    .log-entry.sandbox { background-color: #fff3cd; border-left-color: #ffc107; border-left-width: 6px; }
    .alert-sm { padding: 0.25rem 0.5rem; margin-bottom: 0.5rem; }
</style>